/**
 * KEN BURNS SLIDER : Mixins
 * ======================================================================
 * Mixins used to build slideshows.
 * ----------------------------------------------------------------------
 * @author      Fabio Y. Goto <lab@yuiti.com.br>
 * @version     0.0.1
 */

/**
 * Sets properties for the slideshow wrapper.
 */
@mixin kb_slide_wrapper($width: 100vw, $height: 100vh) {
    width: $width;
    height: $height;
    display: block;
    position: absolute;
    overflow: hidden;
}

/**
 * Sets property for the slider's children.
 */
@mixin kb_slide_children(
    $name: $kb-name, 
    $items: $kb-items, 
    $total-time: $kb-total-time, 
    $scale-base: $kb-scale-base
) {
    background: no-repeat 50% 50%;
    background-size: cover;
    width: 100%;
    height: 100%;
    position: absolute;
    animation-name: $name;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    animation-duration: $total-time;
    opacity: 1;
    transform: scale($scale-base);

    @for $i from 1 through $items {
        &:nth-child(#{$i}) {
            animation-name: #{$name}-#{$i};
            z-index: ($items - $i);
        }
    }
}

/**
 * Defines the keyframes for the slider's animation.
 */
@mixin kb_slide_keyframe(
    $name: $kb-name, 
    $items: $kb-items, 
    $animation-time: $kb-animation-time, 
    $transition-time: $kb-transition-time, 
    $total-time: $kb-total-time, 
    $scale: $kb-scale, 
    $scale-base: $kb-scale-base
) {
    @for $i from 1 through $items {
        @keyframes #{$name}-#{$i} {
            // Define percentual value for animation time
            $anim-time-percent: percentage(
                $animation-time / $total-time
            );

            // Define percentual value for transition time
            $trans-time-percent: percentage(
                $transition-time / $total-time
            );

            // Calculate the frame positions
            $t1: ($anim-time-percent * ($i - 1) - $trans-time-percent / 2);
            $t2: ($anim-time-percent * ($i - 1) + $trans-time-percent / 2);

            @if ($t1 < 0) {
                $t1: 0;
            }

            @if ($t2 < 0) {
                $t2: 0;
            }

            $t3: ($anim-time-percent * ($i) - $trans-time-percent / 2);
            $t4: ($anim-time-percent * ($i) + $trans-time-percent / 2);

            @if ($t3 > 100%) {
                $t3: 100%;
            }
            
            @if ($t4 > 100%) {
                $t4: 100%;
            }

            $t5: (100% - $trans-time-percent / 2);
            $t6: (($t4 - $t1) * 100% / $t5);

            #{$t1} {
                opacity: 1;
                transform: scale($scale-base);
            }

            #{$t2} {
                opacity: 1;
            }

            #{$t3} {
                opacity: 1;
            }

            #{$t4} {
                opacity: 0;
                transform: scale(1);
            }

            @if ($i != $items) {
                100% {
                    opacity: 0;
                    transform: scale($scale-base);
                }
            }

            @if ($i == 1) {
                $scale-plus: ($scale * (100% - $t5) / $t4);
                $scale-plus-base: (1 + ($scale + $scale-plus) / 100%);

                #{$t5} {
                    opacity: 0;
                    transform: scale($scale-plus-base);
                }

                100% {
                    opacity: 1;
                }
            }
        }
    }
}
